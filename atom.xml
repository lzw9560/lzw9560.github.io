<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Victory&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-22T09:17:08.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Victory</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>item2 + oh-my-zsh + solarized配色</title>
    <link href="http://yoursite.com/2017/10/22/linux/Mac/zsh-theme/"/>
    <id>http://yoursite.com/2017/10/22/linux/Mac/zsh-theme/</id>
    <published>2017-10-21T16:00:00.000Z</published>
    <updated>2017-10-22T09:17:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="item2-oh-my-zsh-solarized配色"><a href="#item2-oh-my-zsh-solarized配色" class="headerlink" title="item2 + oh-my-zsh + solarized配色"></a>item2 + oh-my-zsh + solarized配色</h4><a id="more"></a>
<h5 id="iTem2设置为默认终端"><a href="#iTem2设置为默认终端" class="headerlink" title="iTem2设置为默认终端"></a>iTem2设置为默认终端</h5><blockquote>
<p>菜单栏）iTerm2 -&gt; Make iTerm2 Default Term</p>
</blockquote>
<h5 id="iTem2设置为默认终端-1"><a href="#iTem2设置为默认终端-1" class="headerlink" title="iTem2设置为默认终端"></a>iTem2设置为默认终端</h5><blockquote>
<p>打开偏好设置preference，选中Keys，勾选Hotkey下的Show/hide iTerm2 with a system-wide hotkey，将热键设置为command+. ，这样你就可以通过command+. 全局热键来打开或关闭iTerm2窗口，非常方便。</p>
</blockquote>
<h5 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h5><blockquote>
<p>这里选用 solarized，效果还不错。点开官网，下载，解压，然后打开 iTerm2 下的偏好设置 preference ，点开 profiles 下的colors 选项，点击右下角的 Color Presets 选项，选择import ，导入解压到的 solarized 文件下的Solarized Dark.itermcolors。</p>
</blockquote>
<h5 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h5><p>使用 crul 安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c &quot;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</div></pre></td></tr></table></figure>
<p>或使用wget：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div></pre></td></tr></table></figure>
<h5 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h5><p>安装成功后，用vim打开隐藏文件 .zshrc ，修改主题为 agnoster：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># ZSH_THEME=&quot;robbyrussell&quot;</div><div class="line">ZSH_THEME=&quot;agnoster&quot;</div></pre></td></tr></table></figure>
<p>应用这个主题需要特殊的字体支持，否则会出现乱码情况，这时我们来配置字体：</p>
<p>1.使用 Meslo 字体，点开连接<a href="https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.tt" target="_blank" rel="external">字体</a>f点击 view raw 下载字体。</p>
<p>2.安装字体到系统字体册。</p>
<p>3.应用字体到iTerm2下，我自己喜欢将字号设置为14px，看着舒服（iTerm -&gt; Preferences -&gt; Profiles -&gt; Text -&gt; Change Font）。</p>
<p>4.重新打开iTerm2窗口，这时便可以看到效果了。</p>
<h5 id="自动提示命令"><a href="#自动提示命令" class="headerlink" title="自动提示命令"></a>自动提示命令</h5><p>当我们输入命令时，终端会自动提示你接下来可能要输入的命令，这时按 → 便可输出这些命令，非常方便。</p>
<p>设置如下：</p>
<p>1.克隆仓库到本地 ~/.oh-my-zsh/custom/plugins 路径下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</div></pre></td></tr></table></figure>
<p>2.用 vim 打开 .zshrc 文件，找到插件设置命令，默认是 plugins=(git) ，我们把它修改为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=(zsh-autosuggestions git)</div></pre></td></tr></table></figure>
<p>3.重新打开终端窗口。</p>
<p>PS：修改提示字体亮度：</p>
<p>移动到 ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions 路径下</p>
<p>cd ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions<br>用 vim 打开 zsh-autosuggestions.zsh 文件，修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&apos;fg=10&apos;</div></pre></td></tr></table></figure></p>
<h5 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h5><p>1.使用homebrew安装 zsh-syntax-highlighting 插件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install zsh-syntax-highlighting</div></pre></td></tr></table></figure></p>
<p>2.配置.zshrc文件，插入一行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</div></pre></td></tr></table></figure></p>
<p>还有的人是这么干的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">plugins=(zsh-autosuggestions git zsh-syntax-highlighting)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;item2-oh-my-zsh-solarized配色&quot;&gt;&lt;a href=&quot;#item2-oh-my-zsh-solarized配色&quot; class=&quot;headerlink&quot; title=&quot;item2 + oh-my-zsh + solarized配色&quot;&gt;&lt;/a&gt;item2 + oh-my-zsh + solarized配色&lt;/h4&gt;
    
    </summary>
    
      <category term="item2" scheme="http://yoursite.com/categories/item2/"/>
    
    
      <category term="主题配置" scheme="http://yoursite.com/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>tmux</title>
    <link href="http://yoursite.com/2017/10/22/linux/Mac/tmux/"/>
    <id>http://yoursite.com/2017/10/22/linux/Mac/tmux/</id>
    <published>2017-10-21T16:00:00.000Z</published>
    <updated>2017-10-23T07:53:57.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a><a href="https://github.com/tmux/tmux/wiki" target="_blank" rel="external"><strong>tmux</strong></a></h4><a id="more"></a>
<p><code>tmux</code>是什么？一个工具，是linux中的一种管理窗口的程序。<br>tmux提供了多标签和分割窗体的功能，提供了一个窗体组随时存储和恢复的功能。</p>
<h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><ul>
<li>Session： 会话，一组窗口的组合，通常用来概括统一任务。有自己的名字。</li>
<li>Window：窗口，单个可见窗口，有自己的编号。</li>
<li>Pane: 窗格，被划分成小块的窗口。  </li>
</ul>
<p>借个图:<br><img src="http://ww2.sinaimg.cn/mw690/6941baebjw1et4uosbtuhj21kw0qvqf1.jpg" alt=""></p>
<h5 id="Mac下安装"><a href="#Mac下安装" class="headerlink" title="Mac下安装"></a>Mac下安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install tmux</div></pre></td></tr></table></figure>
<h5 id="tmux基本操作"><a href="#tmux基本操作" class="headerlink" title="tmux基本操作"></a>tmux基本操作</h5><blockquote>
<p>Prefix-Command前置操作：所有下面介绍的快捷键，都必须以前置操作开始。tmux默认的前置操作是CTRL+b。例如，我们想要新建一个窗体，就需要先在键盘上摁下CTRL+b，松开后再摁下n键。</p>
</blockquote>
<p>下面所有的prefix均代表CTRL+b</p>
<h2 id="pane"><a href="#pane" class="headerlink" title="pane"></a><code>pane</code></h2><table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">prefix</td>
<td style="text-align:center">%</td>
<td style="text-align:center">水平分割</td>
</tr>
<tr>
<td style="text-align:center">prefix</td>
<td style="text-align:center">:</td>
<td style="text-align:center">竖直分割</td>
</tr>
<tr>
<td style="text-align:center">prefix</td>
<td style="text-align:center">z</td>
<td style="text-align:center">放大当前pane</td>
</tr>
<tr>
<td style="text-align:center">prefix</td>
<td style="text-align:center">方向键</td>
<td style="text-align:center">切换</td>
</tr>
<tr>
<td style="text-align:center">prefix</td>
<td style="text-align:center">ctrl+ 方向键</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">prefix</td>
<td style="text-align:center">:</td>
<td style="text-align:center">竖直分割</td>
</tr>
</tbody>
</table>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><code>Windows</code></h2><table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">prefix</td>
<td style="text-align:center">c</td>
<td style="text-align:center">创建</td>
</tr>
<tr>
<td style="text-align:center">prefix</td>
<td style="text-align:center">数字</td>
<td style="text-align:center">移动</td>
</tr>
<tr>
<td style="text-align:center">prefix</td>
<td style="text-align:center">&amp;</td>
<td style="text-align:center">关闭</td>
</tr>
<tr>
<td style="text-align:center">prefix</td>
<td style="text-align:center">，</td>
<td style="text-align:center">重命名</td>
</tr>
</tbody>
</table>
<!-- 更名后，我随便使用ls或cd命令后，window名称会随着目录的不同而变化。google后发现这个是zsh下oh-my-zsh的特性。于是打开~/.zshrc, 讲DISABLE_AUTO_TITLE="true"这一行反注释掉。source ~/.zshrc后，测试更改的名称，发现一切正常。 -->
<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a><code>Session</code></h2><table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
<th style="text-align:center"></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">tmux ls</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">tmux attach</td>
<td style="text-align:center">如果你已经创建了一个或多个会话，但是还没有运行 Tmux，那么可以输入如下命令以接入已开启的会话</td>
</tr>
<tr>
<td style="text-align:center">tmux new -s [name-of-session]</td>
<td style="text-align:center">创建时命名</td>
</tr>
<tr>
<td style="text-align:center">tmux a -t [name-of-session]</td>
<td style="text-align:center">a/attach 重新连接叫做name的session</td>
</tr>
<tr>
<td style="text-align:center">tmux a</td>
<td style="text-align:center">只有一个session会快速连接</td>
</tr>
<tr>
<td style="text-align:center">tmux kill-session -a -t [name-of-my-session]</td>
<td style="text-align:center">删除除了name意外的所有session</td>
</tr>
<tr>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">new -s [name-of-session]</td>
<td style="text-align:center">创建一个新的会话</td>
</tr>
<tr>
<td style="text-align:center">prefix + $</td>
<td style="text-align:center">重命名</td>
</tr>
<tr>
<td style="text-align:center">prefix + d / exit</td>
<td style="text-align:center">在只有一个window下输入</td>
</tr>
<tr>
<td style="text-align:center">prefix + s</td>
<td style="text-align:center">获取现有session的列表</td>
</tr>
</tbody>
</table>
<h5 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h5><blockquote>
<p>需要先安装相应主题。</p>
</blockquote>
<p><a href="https://github.com/VimrcMac/.tmux" target="_blank" rel="external">https://github.com/VimrcMac/.tmux</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># you may want to backup your existing ~/.tmux.conf first</div><div class="line"></div><div class="line">mv ~/.tmux.conf ~/.tmux.conf.bak</div><div class="line"></div><div class="line">cd</div><div class="line">git clone https://github.com/gpakosz/.tmux.git</div><div class="line">ln -s -f .tmux/.tmux.conf</div><div class="line">cp .tmux/.tmux.conf.local .</div></pre></td></tr></table></figure>
<h5 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h5><blockquote>
<p>配置文件不存在的话需要创建： touch ~/.tmux.conf</p>
</blockquote>
<!-- 首先，在更改了.tmux.conf后，在tmux里的快捷键没有变化。查找后发现是tmux只有在新建session的时候，才会去找tmux.conf文件。所以说，我之前创建的那些session都没有参考tmux.conf. 所以我就用tmux lstmux kill-session -a只保留当前session。再删除当前session tmux kill-session -t py27。这下删除了所有创建好的session。

然后再次用tmux new -s py27创建一个新的名为py27的session。有提示了，但是错误提示显示没有mode-mouse命令。google之发现在2.1之后的tmux版本里，已经废除了这个命令。想要开启mouse mode的话，只需要一个句命令即可set -g mouse on。

作者：赤乐君
链接：http://www.jianshu.com/p/fd3bbdba9dc9
來源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 -->
<h6 id="Send-prefix"><a href="#Send-prefix" class="headerlink" title="Send prefix"></a>Send prefix</h6><blockquote>
<p>把prefix的ctrl+b变为了ctrl+a，因为这样按起来方便些。基本上用tmux的都改了这个。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Send prefix</div><div class="line">set-option -g prefix C-a</div><div class="line">unbind-key C-a</div><div class="line">bind-key C-a send-prefix</div></pre></td></tr></table></figure>
<h6 id="Use-Alt-arrow-keys-to-switch-panes"><a href="#Use-Alt-arrow-keys-to-switch-panes" class="headerlink" title="Use Alt-arrow keys to switch panes"></a>Use Alt-arrow keys to switch panes</h6><blockquote>
<p>不用按prefix，直接用alt+箭头在pane之间switch。实际用过之后才发现真是太方便了！</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Use Alt-arrow keys to switch panes</div><div class="line">bind -n M-Left select-pane -L</div><div class="line">bind -n M-Right select-pane -R</div><div class="line">bind -n M-Up select-pane -U</div><div class="line">bind -n M-Down select-pane -D</div></pre></td></tr></table></figure>
<h6 id="Shift-arrow-to-switch-windows"><a href="#Shift-arrow-to-switch-windows" class="headerlink" title="Shift arrow to switch windows"></a>Shift arrow to switch windows</h6><blockquote>
<p>不用按prefix，直接用shift+箭头在window之间switch。太方便了！</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Shift arrow to switch windows</div><div class="line">bind -n S-Left previous-window</div><div class="line">bind -n S-Right next-window</div></pre></td></tr></table></figure>
<h6 id="Mouse-mode"><a href="#Mouse-mode" class="headerlink" title="Mouse mode"></a>Mouse mode</h6><blockquote>
<p>开启鼠标模式。用鼠标就能切换window，pane，还能调整pane的大小，方便！</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Mouse mode</div><div class="line">set -g mouse on</div></pre></td></tr></table></figure>
<h6 id="Set-easier-window-split-keys"><a href="#Set-easier-window-split-keys" class="headerlink" title="Set easier window split keys"></a>Set easier window split keys</h6><blockquote>
<p>这一部分是用来更方便切分pane的。prefix + v 代表竖着切，prefix + h 代表横着切。比起默认的切割方法不仅直观而且方便。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># Set easier window split keys</div><div class="line">bind-key v split-window -h</div><div class="line">bind-key h split-window -v</div></pre></td></tr></table></figure>
<h6 id="Easy-config-reload"><a href="#Easy-config-reload" class="headerlink" title="Easy config reload"></a>Easy config reload</h6><blockquote>
<p>下一次如果修改了.tmux.conf的设置的话，不用关掉tmux。直接用prefix+r,就能重新加载设置。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Easy config reload</div><div class="line">bind-key r source-file ~/.tmux.conf \; display-message &quot;.tmux.conf reloaded. Your configuration has been updated.&quot;</div></pre></td></tr></table></figure>
<h6 id="在文本间移动光标"><a href="#在文本间移动光标" class="headerlink" title="在文本间移动光标"></a>在文本间移动光标</h6><blockquote>
<p>在 Tmux 中可以使用与 Vim 极为相似的方式在文本间移动光标。正如你熟知的那样，用 k 键可以将光标移动到上一行，用 w 键可以向后移动一个单词等等。而且还可以通过把 Tmux 设为 vi 模式，使其与 Vim 的操作更加接近。为此，需要将以下配置加入到文件 ~/.tmux.conf 中。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># Use vim keybindings in copy mode</div><div class="line">setw -g mode-keys vi</div></pre></td></tr></table></figure>
<h6 id="将复制下来的文本发送到系统的剪贴板中"><a href="#将复制下来的文本发送到系统的剪贴板中" class="headerlink" title="将复制下来的文本发送到系统的剪贴板中"></a>将复制下来的文本发送到系统的剪贴板中</h6><blockquote>
<p>在默认情况下，当从 Tmux 中复制文本时，复制下来的文本只能粘贴到同一个 Tmux 会话中。若要使复制下来的文本可以粘贴到任何位置，就需要让 Tmux 将文本复制到系统的剪贴板。为此，我们需要这样做：</p>
</blockquote>
<p>安装 retach-to-user-namespace。用 brew 安装的话将会非常简单，只需要运行下面这条命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install reattach-to-user-namespace</div></pre></td></tr></table></figure>
<h6 id="选择并复制文本"><a href="#选择并复制文本" class="headerlink" title="选择并复制文本"></a>选择并复制文本</h6><blockquote>
<p>首先按下 <code>Ctrl-b</code> [ 进入复制模式，然后可以看到一小段高亮的文本出现在了屏幕的右上角 (“[0/0]”)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># invoke reattach-to-user-namespace every time a new window/pane opens</div><div class="line">set-option -g default-command &quot;reattach-to-user-namespace -l bash&quot;</div></pre></td></tr></table></figure>
<h6 id="使用vim快捷键"><a href="#使用vim快捷键" class="headerlink" title="使用vim快捷键"></a>使用vim快捷键</h6><blockquote>
<p>使用 v 开始选择， y 复制</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># start selecting text typing &apos;v&apos; key (once you are in copy mode)</div><div class="line">bind-key -t vi-copy v begin-selection</div><div class="line"># copy selected text to the system&apos;s clipboard</div><div class="line">bind-key -t vi-copy y copy-pipe &quot;reattach-to-user-namespace pbcopy&quot;</div><div class="line"></div><div class="line">``` </div><div class="line"></div><div class="line"></div><div class="line">##### 高效的结对编程</div><div class="line"></div><div class="line">Tmate 是一个 Tmux 的管理工具，使用它不但能够轻松地创建 Tmux 会话而且还能够通过互联网把该会话共享给其他人。若要使用 Tmate 共享 Tmux 会话，请按照以下步骤操作：</div><div class="line"></div><div class="line">- 安装tmate</div></pre></td></tr></table></figure>
<pre><code>brew update &amp;&amp; brew tap nviennot/tmate &amp;&amp; brew install mate
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">- 开启一个新的会话</div></pre></td></tr></table></figure>

tmate
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">- 从 Tmux 的会话中复制由 Tmate 产生的 SSH URL。请注意屏幕下方的信息“[tmate] Remote session: ssh …”</div><div class="line"></div><div class="line"></div><div class="line">##### 调整 Tmux 以增强其同 Vim 的集成度</div><div class="line"></div><div class="line">###### 调整背景的配色方案</div><div class="line">将下面配置添加到 .vimrc 文件</div></pre></td></tr></table></figure>
</code></pre><p>if exists(‘$TMUX’)<br>  set term=screen-256color<br>endif</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###### 调整光标的形状</div><div class="line"></div><div class="line">在默认情况下，当通过 Tmux 运行 Vim 时，无论当前 Vim 是处于插入模式、可视模式还是其他模式，光标的形状都是一样的。这样就很难判断当前的 Vim 模式是什么。若要避免这个问题，就需要让 Tmux 通知 iTerm 更新光标的形状。为此，需要将以下配置加入到文件 ~/.vimrc 中。</div><div class="line"></div><div class="line">&gt; 这里有问题，需要注意，如果您在Tmux会话中使用Vim，则需要双重转义t SI / t EI中的代码。 TODO</div></pre></td></tr></table></figure>
<p>if exists(‘$ITERM_PROFILE’)<br>  if exists(‘$TMUX’)<br>    let &amp;t_SI = “\<esc>[3 q”<br>    let &amp;t_EI = “\<esc>[0 q”<br>  else<br>    let &amp;t_SI = “\<esc>]50;CursorShape=1x7”<br>    let &amp;t_EI = “\<esc>]50;CursorShape=0x7”<br>  endif<br>end</esc></esc></esc></esc></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">###### 调整粘贴时的文本缩进</div><div class="line"></div><div class="line">在 Vim 中粘贴文本时可能会遇到这样的问题，有时文本的缩进会发生变化，特别是在粘贴大量的文本时，这个问题会更加明显。虽然可以通过在粘贴前执行 :set nopaste 来解决这个问题，但是这里还有一种更好的解决方法。就是把下面这段配置加入到配置文件 ~/.vimrc 中，这样 Vim 就会自动地阻止粘贴文本时的自动缩进。</div><div class="line"></div><div class="line">https://coderwall.com/p/if9mda/automatically-set-paste-mode-in-vim-when-pasting-in-insert-mode</div><div class="line"></div><div class="line"></div><div class="line">#### Tmuxinator</div><div class="line"></div><div class="line">为项目自动创建会话。[Tmuxinator](https://github.com/tmuxinator/tmuxinator) 是一个ruby的gem包，客用户创建Tmux会话。Tmuxinator现在配置文件中定义会话中的细节，然后用命令创建这些会话。</div><div class="line">- 安装</div></pre></td></tr></table></figure>
<pre><code>gem install tmuxinator

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 创建</div></pre></td></tr></table></figure>

# mux
tmuxinator new project_a

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">回车之后，会自动打开文件 `~/.tmuxinator/project_a.yml`</div><div class="line"></div><div class="line">更新配置文件</div></pre></td></tr></table></figure>

name: project_a
root: &lt;the-folder-of-project-A&gt;

windows:
  - server: &lt;command-to-start-application-server&gt;

  - editor:
    layout: even-horizontal
    panes:
      - vim
      - &lt;command-to-launch-tests-guard&gt;

  - shell: &apos;&apos;

<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- 启动会话</div></pre></td></tr></table></figure>

tmuxinator start project_a

# or

tmuxinator start project_a        
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">---------------</div></pre></td></tr></table></figure>
</code></pre><h1 id="tmux-conf"><a href="#tmux-conf" class="headerlink" title=".tmux.conf"></a>.tmux.conf</h1><h1 id="Send-prefix-1"><a href="#Send-prefix-1" class="headerlink" title="Send prefix"></a>Send prefix</h1><p>set-option -g prefix C-a<br>unbind-key C-a<br>bind-key C-a send-prefix</p>
<h1 id="Use-Alt-arrow-keys-to-switch-panes-1"><a href="#Use-Alt-arrow-keys-to-switch-panes-1" class="headerlink" title="Use Alt-arrow keys to switch panes"></a>Use Alt-arrow keys to switch panes</h1><p>bind -n M-Left select-pane -L<br>bind -n M-Right select-pane -R<br>bind -n M-Up select-pane -U<br>bind -n M-Down select-pane -D</p>
<h1 id="Shift-arrow-to-switch-windows-1"><a href="#Shift-arrow-to-switch-windows-1" class="headerlink" title="Shift arrow to switch windows"></a>Shift arrow to switch windows</h1><p>bind -n S-Left previous-window<br>bind -n S-Right next-window</p>
<h1 id="Mouse-mode-1"><a href="#Mouse-mode-1" class="headerlink" title="Mouse mode"></a>Mouse mode</h1><p>set -g mouse on</p>
<h1 id="Set-easier-window-split-keys-1"><a href="#Set-easier-window-split-keys-1" class="headerlink" title="Set easier window split keys"></a>Set easier window split keys</h1><p>bind-key v split-window -h<br>bind-key h split-window -v</p>
<h1 id="Easy-config-reload-1"><a href="#Easy-config-reload-1" class="headerlink" title="Easy config reload"></a>Easy config reload</h1><p>bind-key r source-file ~/.tmux.conf \; display-message “.tmux.conf reloaded”</p>
<h1 id="Invoke-reattach-to-user-namespace-every-time-a-new-window-pane-opens"><a href="#Invoke-reattach-to-user-namespace-every-time-a-new-window-pane-opens" class="headerlink" title="Invoke reattach-to-user-namespace every time a new window/pane opens"></a>Invoke reattach-to-user-namespace every time a new window/pane opens</h1><p>set-option -g default-command “reattach-to-user-namespace -l bash”</p>
<h1 id="Use-vim-keybindings-in-copy-mode"><a href="#Use-vim-keybindings-in-copy-mode" class="headerlink" title="Use vim keybindings in copy mode"></a>Use vim keybindings in copy mode</h1><p>setw -g mode-keys vi</p>
<h1 id="start-selecting-text-typing-‘v’-key-once-you-are-in-copy-mode"><a href="#start-selecting-text-typing-‘v’-key-once-you-are-in-copy-mode" class="headerlink" title="start selecting text typing ‘v’ key (once you are in copy mode)"></a>start selecting text typing ‘v’ key (once you are in copy mode)</h1><p>bind-key -t vi-copy v begin-selection</p>
<h1 id="copy-selected-text-to-the-system’s-clipboard"><a href="#copy-selected-text-to-the-system’s-clipboard" class="headerlink" title="copy selected text to the system’s clipboard"></a>copy selected text to the system’s clipboard</h1><p>bind-key -t vi-copy y copy-pipe “reattach-to-user-namespace pbcopy”</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">&lt;!--http://blog.jobbole.com/87584/--&gt;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">Iterm2 常用快捷键</div></pre></td></tr></table></figure>
<p>⌘ + 数字 ： 各 tab 标签切换<br>⌘ + f ： 查找 ，所查找的内容会被自动复制 ,输入查找的部分字符，找到匹配的值按tab，即可复制<br>⌘ + d ： 横着分屏<br>⌘ + shift + d ： 竖着分屏<br>⌘ + r = clear ： 换到新一屏，而不是 类似clear ，会创建一个空屏<br>ctrl + u ：清空当前行，无论光标在什么位置<br>() + ⌘ + ; ： [() 输入的命令开头字符],会自动列出输入过的命令<br>⌘ + shift + h ： 会列出剪切板历史<br>⌘← / ⌘→ : 到一行命令最左边/最右边<br>⌘ + enter : 全屏</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">tmux 常用快捷键</div></pre></td></tr></table></figure>
<p>Ctrl+b // 激活控制台；此时以下按键生效<br>系统操作<br>? // 列出所有快捷键；按q返回<br>d // 脱离当前会话；这样可以暂时返回Shell界面，输入tmux attach能够重新进入之前的会话<br>D // 选择要脱离的会话；在同时开启了多个会话时使用<br>Ctrl+z // 挂起当前会话<br>r // 强制重绘未脱离的会话<br>s // 选择并切换会话；在同时开启了多个会话时使用<br>: // 进入命令行模式；此时可以输入支持的命令，例如kill-server可以关闭服务器<br>[ // 进入复制模式；此时的操作与vi/emacs相同，按q/Esc退出<br>~ // 列出提示信息缓存；其中包含了之前tmux返回的各种提示信息<br>窗口操作<br>c // 创建新窗口<br>&amp; // 关闭当前窗口<br>数字键 // 切换至指定窗口<br>p // 切换至上一窗口<br>n // 切换至下一窗口<br>l // 在前后两个窗口间互相切换<br>w // 通过窗口列表切换窗口<br>, // 重命名当前窗口；这样便于识别<br>. // 修改当前窗口编号；相当于窗口重新排序<br>f // 在所有窗口中查找指定文本<br>面板操作<br>” // 将当前面板平分为上下两块<br>% // 将当前面板平分为左右两块<br>x // 关闭当前面板<br>! // 将当前面板置于新窗口；即新建一个窗口，其中仅包含当前面板<br>Ctrl+方向键 // 以1个单元格为单位移动边缘以调整当前面板大小<br>Alt+方向键 // 以5个单元格为单位移动边缘以调整当前面板大小<br>Space // 在预置的面板布局中循环切换；依次包括even-horizontal、even-vertical、main-horizontal、main-vertical、tiled<br>q // 显示面板编号<br>o // 在当前窗口中选择下一面板<br>方向键 // 移动光标以选择面板<br>{ // 向前置换当前面板<br>} // 向后置换当前面板<br>Alt+o // 逆时针旋转当前窗口的面板<br>Ctrl+o // 顺时针旋转当前窗口的面板</p>
<p>```</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;tmux&quot;&gt;&lt;a href=&quot;#tmux&quot; class=&quot;headerlink&quot; title=&quot;tmux&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/tmux/tmux/wiki&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;strong&gt;tmux&lt;/strong&gt;&lt;/a&gt;&lt;/h4&gt;
    
    </summary>
    
      <category term="tmux" scheme="http://yoursite.com/categories/tmux/"/>
    
    
      <category term="tmux" scheme="http://yoursite.com/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>item2 + oh-my-zsh + solarized配色</title>
    <link href="http://yoursite.com/2017/10/22/linux/Mac/powerline/"/>
    <id>http://yoursite.com/2017/10/22/linux/Mac/powerline/</id>
    <published>2017-10-21T16:00:00.000Z</published>
    <updated>2017-10-23T01:47:08.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="powerline"><a href="#powerline" class="headerlink" title="powerline"></a>powerline</h4><a id="more"></a>
<p>powerline是一个stateless status line，即一个全局状态/提示栏.<br><a href="https://github.com/powerline/powerline" target="_blank" rel="external">powerline</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;powerline&quot;&gt;&lt;a href=&quot;#powerline&quot; class=&quot;headerlink&quot; title=&quot;powerline&quot;&gt;&lt;/a&gt;powerline&lt;/h4&gt;
    
    </summary>
    
      <category term="item2" scheme="http://yoursite.com/categories/item2/"/>
    
    
      <category term="主题配置" scheme="http://yoursite.com/tags/%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>MacVim</title>
    <link href="http://yoursite.com/2017/10/22/linux/Mac/macVim/"/>
    <id>http://yoursite.com/2017/10/22/linux/Mac/macVim/</id>
    <published>2017-10-21T16:00:00.000Z</published>
    <updated>2017-10-22T16:30:39.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MacVim"><a href="#MacVim" class="headerlink" title="MacVim"></a>MacVim</h4><a id="more"></a>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;MacVim&quot;&gt;&lt;a href=&quot;#MacVim&quot; class=&quot;headerlink&quot; title=&quot;MacVim&quot;&gt;&lt;/a&gt;MacVim&lt;/h4&gt;
    
    </summary>
    
      <category term="MacVim" scheme="http://yoursite.com/categories/MacVim/"/>
    
    
      <category term="MacVim" scheme="http://yoursite.com/tags/MacVim/"/>
    
  </entry>
  
  <entry>
    <title>Mac下Python多版本环境管理</title>
    <link href="http://yoursite.com/2017/10/22/code/Python/pyenv/"/>
    <id>http://yoursite.com/2017/10/22/code/Python/pyenv/</id>
    <published>2017-10-21T16:00:00.000Z</published>
    <updated>2017-10-22T08:28:03.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Mac-Python多版本环境管理"><a href="#Mac-Python多版本环境管理" class="headerlink" title="Mac Python多版本环境管理"></a>Mac Python多版本环境管理</h4><a id="more"></a>
<p>首先通过homebrew安装pyenv，之后的所有Python安装和管理通过pyenv进行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install pyenv</div></pre></td></tr></table></figure></p>
<p>pyenv安装完以后，就可以选择性的进行Python环境安装了。下面已安装Python2.7为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv install 2.7.5</div></pre></td></tr></table></figure></p>
<p>此外，你还可以通过pyenv查看目前系统中已经安装过的Python版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv versions</div></pre></td></tr></table></figure></p>
<p>如果需要在不同版本的Python间进行切换的话，使用以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv global 3.3.1</div></pre></td></tr></table></figure></p>
<p>当然，你也可以让版本切换只对当前目录生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pyenv local 2.7.5</div></pre></td></tr></table></figure></p>
<p>参考文档地址：<br><a href="https://stackoverflow.com/questions/18671253/how-can-i-use-homebrew-to-install-both-python-2-and-3-on-mac" target="_blank" rel="external">转自Stackoverflow的回答</a>  </p>
<p><a href="https://github.com/pyenv/pyenv" target="_blank" rel="external">Github地址：pyenv）</a><br><a href="https://github.com/pyenv/pyenv-virtualenv" target="_blank" rel="external">Github地址：pyenv-virtuelanv）</a></p>
<p><a href="https://conda.io/docs/index.html" target="_blank" rel="external">conda使用说明</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Mac-Python多版本环境管理&quot;&gt;&lt;a href=&quot;#Mac-Python多版本环境管理&quot; class=&quot;headerlink&quot; title=&quot;Mac Python多版本环境管理&quot;&gt;&lt;/a&gt;Mac Python多版本环境管理&lt;/h4&gt;
    
    </summary>
    
      <category term="pyenv" scheme="http://yoursite.com/categories/pyenv/"/>
    
    
      <category term="Python环境管理" scheme="http://yoursite.com/tags/Python%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>NERDTree 快捷键</title>
    <link href="http://yoursite.com/2017/10/21/linux/vim/nerdtree/"/>
    <id>http://yoursite.com/2017/10/21/linux/vim/nerdtree/</id>
    <published>2017-10-20T16:00:00.000Z</published>
    <updated>2017-10-21T10:07:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="NerdTree-在-vimrc-中的常用配置"><a href="#NerdTree-在-vimrc-中的常用配置" class="headerlink" title="NerdTree 在 .vimrc 中的常用配置"></a>NerdTree 在 .vimrc 中的常用配置</h3><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&quot; 在 vim 启动的时候默认开启 NERDTree（autocmd 可以缩写为 au）</div><div class="line">autocmd VimEnter * NERDTree</div><div class="line"></div><div class="line">&quot; 按下 F2 调出/隐藏 NERDTree</div><div class="line">map  :silent! NERDTreeToggle</div><div class="line"></div><div class="line">&quot; 将 NERDTree 的窗口设置在 vim 窗口的右侧（默认为左侧）</div><div class="line">let NERDTreeWinPos=&quot;right&quot;</div><div class="line"></div><div class="line">&quot; 当打开 NERDTree 窗口时，自动显示 Bookmarks</div><div class="line">let NERDTreeShowBookmarks=1</div><div class="line"></div><div class="line">&quot; nnoremap &lt;silent&gt; &lt;F5&gt; :NERDTree&lt;CR&gt;</div><div class="line">  </div><div class="line"></div><div class="line"></div><div class="line">map &lt;F3&gt; :NERDTreeMirror&lt;CR&gt;</div><div class="line">map &lt;F3&gt; :NERDTreeToggle&lt;CR&gt;</div></pre></td></tr></table></figure>
<h3 id="切换工作台和目录"><a href="#切换工作台和目录" class="headerlink" title="切换工作台和目录"></a>切换工作台和目录</h3><!--more-->
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ctrl + w + h    光标 focus 左侧树形目录</div><div class="line">ctrl + w + l    光标 focus 右侧文件显示窗口</div><div class="line">ctrl +https://itunes.apple.com/app/read-it-later-pro/id309601447?mt=8 w + w    光标自动在左右侧窗口切换</div><div class="line">ctrl + w + r    移动当前窗口的布局位置</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">o       在已有窗口中打开文件、目录或书签，并跳到该窗口</div><div class="line">go      在已有窗口 中打开文件、目录或书签，但不跳到该窗口</div><div class="line">t       在新 Tab 中打开选中文件/书签，并跳到新 Tab</div><div class="line">T       在新 Tab 中打开选中文件/书签，但不跳到新 Tab</div><div class="line">i       split 一个新窗口打开选中文件，并跳到该窗口</div><div class="line">gi      split 一个新窗口打开选中文件，但不跳到该窗口</div><div class="line">s       vsplit 一个新窗口打开选中文件，并跳到该窗口</div><div class="line">gs      vsplit 一个新 窗口打开选中文件，但不跳到该窗口</div><div class="line">!       执行当前文件</div><div class="line">O       递归打开选中 结点下的所有目录</div><div class="line">x       合拢选中结点的父目录</div><div class="line">X       递归 合拢选中结点下的所有目录</div><div class="line">e       Edit the current dif</div><div class="line"></div><div class="line">双击    相当于 NERDTree-o</div><div class="line">中键    对文件相当于 NERDTree-i，对目录相当于 NERDTree-e</div><div class="line"></div><div class="line">D       删除当前书签</div><div class="line"></div><div class="line">P       跳到根结点</div><div class="line">p       跳到父结点</div><div class="line">K       跳到当前目录下同级的第一个结点</div><div class="line">J       跳到当前目录下同级的最后一个结点</div><div class="line">k       跳到当前目录下同级的前一个结点</div><div class="line">j       跳到当前目录下同级的后一个结点</div><div class="line"></div><div class="line">C       将选中目录或选中文件的父目录设为根结点</div><div class="line">u       将当前根结点的父目录设为根目录，并变成合拢原根结点</div><div class="line">U       将当前根结点的父目录设为根目录，但保持展开原根结点</div><div class="line">r       递归刷新选中目录</div><div class="line">R       递归刷新根结点</div><div class="line">m       显示文件系统菜单</div><div class="line">cd      将 CWD 设为选中目录</div><div class="line"></div><div class="line">I       切换是否显示隐藏文件</div><div class="line">f       切换是否使用文件过滤器</div><div class="line">F       切换是否显示文件</div><div class="line">B       切换是否显示书签</div><div class="line"></div><div class="line">q       关闭 NerdTree 窗口</div><div class="line">?       切换是否显示 Quick Help</div></pre></td></tr></table></figure>
<h3 id="切换标签页"><a href="#切换标签页" class="headerlink" title="切换标签页"></a>切换标签页</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">:tabnew [++opt选项] ［＋cmd］ 文件      建立对指定文件新的tab</div><div class="line">:tabc   关闭当前的 tab</div><div class="line">:tabo   关闭所有其他的 tab</div><div class="line">:tabs   查看所有打开的 tab</div><div class="line">:tabp   前一个 tab</div><div class="line">:tabn   后一个 tab</div><div class="line"></div><div class="line">标准模式下：</div><div class="line">gT      前一个 tab</div><div class="line">gt      后一个 tab</div><div class="line"></div><div class="line">MacVim 还可以借助快捷键来完成 tab 的关闭、切换</div><div class="line">cmd+w   关闭当前的 tab</div><div class="line">cmd+&#123;   前一个 tab</div><div class="line">cmd+&#125;   后一个 tab</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;NerdTree-在-vimrc-中的常用配置&quot;&gt;&lt;a href=&quot;#NerdTree-在-vimrc-中的常用配置&quot; class=&quot;headerlink&quot; title=&quot;NerdTree 在 .vimrc 中的常用配置&quot;&gt;&lt;/a&gt;NerdTree 在 .vimrc 中的常用配置&lt;/h3&gt;
    
    </summary>
    
      <category term="vim" scheme="http://yoursite.com/categories/vim/"/>
    
    
      <category term="Linux/vim" scheme="http://yoursite.com/tags/Linux-vim/"/>
    
  </entry>
  
  <entry>
    <title>Visual Studio Code开发技巧</title>
    <link href="http://yoursite.com/2017/09/27/tool/vscode/"/>
    <id>http://yoursite.com/2017/09/27/tool/vscode/</id>
    <published>2017-09-27T05:24:50.000Z</published>
    <updated>2017-09-27T05:54:57.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><a id="more"></a>
<p><a href="https://code.visualstudio.com/docs/" target="_blank" rel="external">https://code.visualstudio.com/docs/</a></p>
<h4 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h4><p><a href="http://www.sohu.com/a/109891407_468731" target="_blank" rel="external">http://www.sohu.com/a/109891407_468731</a></p>
<h4 id="vscode插件库"><a href="#vscode插件库" class="headerlink" title="vscode插件库"></a>vscode插件库</h4><p><a href="https://marketplace.visualstudio.com/VSCode" target="_blank" rel="external">https://marketplace.visualstudio.com/VSCode</a></p>
<h4 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h4><ol>
<li><p>Bracket Pair Colorizer ：对括号对进行着色，再也不会搞不清状况了。</p>
</li>
<li><p>Git History: 可以查看Git log, file, 和line 历史记录。</p>
</li>
<li><p>Markdown PDF: 将markdown文档转换成pdf的利器</p>
</li>
<li><p>VSCode Great Icons: 我非常喜欢的一套Icons主题，对展开的文件有变色处理，很容易分辨</p>
</li>
<li><p>vscode-fileheader: 添加头header comment，厉害的</p>
</li>
<li><p>monokia dimmed颜色主题，码员大爱</p>
</li>
<li><p>Path Intellisense: 路径提示器，好用得不得了</p>
</li>
<li><p>Setting Sync: 同步你得设置和插件</p>
</li>
<li><p>output colorizer: 输出着色</p>
</li>
</ol>
<p>其他：</p>
<ol>
<li><p>Code Spellchecker : 代码拼写检查，有时候也很烦，但是为了养成好的命名习惯也是好的</p>
</li>
<li><p>Document This: 为JavaScript和TypeScript提供JSDoc comments</p>
</li>
<li><p>filesize : 会在左下角显示文件大小，很不错</p>
</li>
<li><p>markdownlint: markdown 语法提示器</p>
</li>
<li><p>Visual Studio Code Settings Sync 可以同步配置插件等到 gist</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerlink&quot; title=&quot;下载地址&quot;&gt;&lt;/a&gt;下载地址&lt;/h4&gt;
    
    </summary>
    
      <category term="tool" scheme="http://yoursite.com/categories/tool/"/>
    
    
      <category term="VS Code" scheme="http://yoursite.com/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>Anaconda的升级与卸载</title>
    <link href="http://yoursite.com/2017/09/27/websit/NotesOfOther/"/>
    <id>http://yoursite.com/2017/09/27/websit/NotesOfOther/</id>
    <published>2017-09-27T05:24:50.000Z</published>
    <updated>2017-10-21T10:01:29.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><a id="more"></a>
<p>升级Anaconda需要先升级conda</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">conda update conda</div><div class="line">conda update anaconda</div></pre></td></tr></table></figure>
<h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>由于Anaconda的安装文件都包含在一个目录中，所以直接将该目录删除即可。删除整个Anaconda目录：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -rf anaconda</div></pre></td></tr></table></figure></p>
<p>最后，建议清理下.bashrc中的Anaconda路径。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;升级&quot;&gt;&lt;a href=&quot;#升级&quot; class=&quot;headerlink&quot; title=&quot;升级&quot;&gt;&lt;/a&gt;升级&lt;/h4&gt;
    
    </summary>
    
      <category term="Linux/MacOs" scheme="http://yoursite.com/categories/Linux-MacOs/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Golang 安装</title>
    <link href="http://yoursite.com/2017/09/26/code/golang/install/"/>
    <id>http://yoursite.com/2017/09/26/code/golang/install/</id>
    <published>2017-09-26T08:26:45.000Z</published>
    <updated>2017-09-26T10:01:56.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><a id="more"></a>
<blockquote>
<p><code>Golang</code> 源码安装 <a href="https://golang.org/project/" target="_blank" rel="external">https://golang.org/project/</a></p>
<p>Homebrew 安装 管理和升级建议方便</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install go</div></pre></td></tr></table></figure>
<blockquote>
<p>设置 <em>GOPATH</em>  <em>GOROOT</em> <em>PATH</em></p>
</blockquote>
<p><a href="http://www.linuxidc.com/Linux/2015-02/113109.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2015-02/113109.htm</a></p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://dmdgeeker.com/goBook/docs/ch01/path.html" target="_blank" rel="external">http://dmdgeeker.com/goBook/docs/ch01/path.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h5&gt;
    
    </summary>
    
      <category term="Golang" scheme="http://yoursite.com/categories/Golang/"/>
    
    
      <category term="Golang" scheme="http://yoursite.com/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>travis-ci 自动部署 Hexo</title>
    <link href="http://yoursite.com/2017/09/26/hexo/travis/"/>
    <id>http://yoursite.com/2017/09/26/hexo/travis/</id>
    <published>2017-09-26T07:05:42.000Z</published>
    <updated>2017-09-26T08:08:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="travis-ci-自动部署-Hexo"><a href="#travis-ci-自动部署-Hexo" class="headerlink" title="travis-ci 自动部署 Hexo"></a>travis-ci 自动部署 Hexo</h2><a id="more"></a>
<blockquote>
<p>travis-ci是一个持续集成工具，目前已经支持大部分主流语言了，如：node.js、objective-c、android、php、c、java、python、ruby、go等等。travis ci与github集成非常紧密，官方的集成测试托管只支持github项目，而且它对于公有的github仓库免费。在这篇文章中，我将介绍如何通过travis-ci自动化部署hexo博客。</p>
</blockquote>
<h4 id="开启-travis-ci"><a href="#开启-travis-ci" class="headerlink" title="开启 travis-ci"></a>开启 travis-ci</h4><ul>
<li>首先去<a href="https://travis-ci.org/" target="_blank" rel="external">travis-ciu</a>]官网，</li>
<li>点击右上角Sign in with GitHub通过github授权登录。</li>
<li>然后去到个人信息页面，开启需要使用travis的项目关</li>
</ul>
<h4 id="加密私钥"><a href="#加密私钥" class="headerlink" title="加密私钥"></a>加密私钥</h4><ul>
<li><p>首先我们要安装travis-ci的命令行工具</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install travis</div></pre></td></tr></table></figure>
</li>
<li><p>然后通过命令行登录travis-ci</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 通过用户名密码登录</div><div class="line"># https://github.com/travis-ci/travis.rb#login</div><div class="line">travis login --auto</div><div class="line"></div><div class="line"># 通过token登录</div><div class="line">travis login --github-token &apos;token&apos;</div></pre></td></tr></table></figure>
<blockquote>
<p>github-token可以去<a href="https://github.com/settings/tokens查看，如果Personal" target="_blank" rel="external">https://github.com/settings/tokens查看，如果Personal</a> access tokens列表里面有的话可以选中一个点击Edit，然后点击Regenerate token重新生成就可以看到token了。没有的话点击Generate new token生成一个token</p>
</blockquote>
<p>  查看是否登录成功</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">travis whoami</div></pre></td></tr></table></figure>
<p>  <a href="http://w3cboy.com/post/2016/03/travisci-hexo-deploy/" target="_blank" rel="external">http://w3cboy.com/post/2016/03/travisci-hexo-deploy/</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;travis-ci-自动部署-Hexo&quot;&gt;&lt;a href=&quot;#travis-ci-自动部署-Hexo&quot; class=&quot;headerlink&quot; title=&quot;travis-ci 自动部署 Hexo&quot;&gt;&lt;/a&gt;travis-ci 自动部署 Hexo&lt;/h2&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="travis-ci" scheme="http://yoursite.com/tags/travis-ci/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2使用sz/rz</title>
    <link href="http://yoursite.com/2017/09/21/linux/Tool/szrc/"/>
    <id>http://yoursite.com/2017/09/21/linux/Tool/szrc/</id>
    <published>2017-09-21T03:27:20.000Z</published>
    <updated>2017-09-21T06:54:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sz-rz"><a href="#sz-rz" class="headerlink" title="sz/rz"></a>sz/rz</h3><a id="more"></a>
<blockquote>
<p>在Windows下SecureCRT 或者Xshell可以很方便的使用上传下载工具sz、rz，mac下我们一般使用scp来完成。<br>但是在某些场景下（登录服务器使用跳板机等）不能使用scp。</p>
</blockquote>
<h3 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h3><ul>
<li><p>上传<br>  <code>scp -r local_folder remote_username@remote_ip:remote_folder</code></p>
<p>  <code>scp -r local_folder remote_ip:remote_folder</code></p>
</li>
<li><p>下载<br>  <code>scp -r remote_username@remote_ip:remote_folder local_folder</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">几个可能用到的参数：</div><div class="line">-v 和大多数linux命令中的-v意思一样,用来显示进度。可以用来查看连接、认证、或是配置错误。</div><div class="line">-r 递归处理，将指定目录下的文档和子目录一并处理</div><div class="line">-C 使能压缩选项</div><div class="line">-P 选择端口。注意-p已经被rcp使用</div><div class="line">-4 强行使用IPV4地址</div><div class="line">-6 强行使用IPV6地址</div></pre></td></tr></table></figure>
<h3 id="mac下品日志使用rz、sz"><a href="#mac下品日志使用rz、sz" class="headerlink" title="mac下品日志使用rz、sz"></a>mac下品日志使用rz、sz</h3><ul>
<li>首先需要安装 iterm2</li>
<li>安装 lrzsz: <code>brew install lrzsz</code></li>
<li><p>下载iterm2-zmodem</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cd /usr/local/bin</div><div class="line"></div><div class="line">sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-send-zmodem.sh</div><div class="line"></div><div class="line">sudo wget https://raw.github.com/mmastrac/iterm2-zmodem/master/iterm2-recv-zmodem.sh</div><div class="line"></div><div class="line">sudo chmod 777 /usr/local/bin/iterm2-*</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>添加trigger</li>
</ul>
<pre><code>打开Item2，点击profiles，选择某个profile之后然后继续选择advanced → triggers，添加triggers。
</code></pre><table>
<thead>
<tr>
<th>Regular</th>
<th>expression</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td>**B0100</td>
<td>Run Silent Coprocess</td>
<td>/usr/local/bin/iterm2-send-zmodem.sh</td>
</tr>
<tr>
<td>**B00000000000000</td>
<td>Run Silent Coprocess</td>
<td>/usr/local/bin/iterm2-recv-zmodem.sh</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sz-rz&quot;&gt;&lt;a href=&quot;#sz-rz&quot; class=&quot;headerlink&quot; title=&quot;sz/rz&quot;&gt;&lt;/a&gt;sz/rz&lt;/h3&gt;
    
    </summary>
    
      <category term="tool" scheme="http://yoursite.com/categories/tool/"/>
    
    
      <category term="Linux/sz、rz" scheme="http://yoursite.com/tags/Linux-sz%E3%80%81rz/"/>
    
  </entry>
  
  <entry>
    <title>Supervisor 安装配置</title>
    <link href="http://yoursite.com/2017/09/12/tool/supervisor/"/>
    <id>http://yoursite.com/2017/09/12/tool/supervisor/</id>
    <published>2017-09-12T09:00:46.000Z</published>
    <updated>2017-09-12T09:15:04.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h4><a id="more"></a>
<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>-<br>在 web 应用部署到线上后，需要保证应用一直处于运行状态，在遇到程序异常、报错等情况，导致 web 应用终止时，需要保证程序可以立刻重启，继续提供服务。</p>
<p>所以，就需要一个工具，时刻监控 web 应用的运行情况，管理该进程。</p>
<p>Supervisor 就是解决这种需求的工具，可以保证程序崩溃后，重新把程序启动起来等功能。</p>
<p>Supervisor 是一个用 Python 写的进程管理工具，可以很方便的用来在 UNIX-like 系统（不支持 Windows）下启动、重启（自动重启程序）、关闭进程（不仅仅是 Python 进程）。</p>
<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>-</p>
<ol>
<li>Ubuntu系统下：apt-get install supervisor，通过这种方式安装后，自动设置为开机启动</li>
<li>也可以通过 pip install supervisor 进行安装，但是需要手动启动，然后设置为开机启动（不推荐这种安装方式）</li>
</ol>
<p>参考：</p>
<ul>
<li><p><a href="http://liyangliang.me/posts/2015/06/using-supervisor/" target="_blank" rel="external">http://liyangliang.me/posts/2015/06/using-supervisor/</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/xueweihan/p/6195824.html" target="_blank" rel="external">http://www.cnblogs.com/xueweihan/p/6195824.html</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Supervisor&quot;&gt;&lt;a href=&quot;#Supervisor&quot; class=&quot;headerlink&quot; title=&quot;Supervisor&quot;&gt;&lt;/a&gt;Supervisor&lt;/h4&gt;
    
    </summary>
    
      <category term="tool" scheme="http://yoursite.com/categories/tool/"/>
    
    
      <category term="Supervisor" scheme="http://yoursite.com/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-Runner</title>
    <link href="http://yoursite.com/2017/09/12/gitlabci/gitlab_runner/"/>
    <id>http://yoursite.com/2017/09/12/gitlabci/gitlab_runner/</id>
    <published>2017-09-12T07:12:03.000Z</published>
    <updated>2017-09-12T08:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="GitLab-Runner"><a href="#GitLab-Runner" class="headerlink" title="GitLab-Runner"></a>GitLab-Runner</h4><a id="more"></a>
<blockquote>
<p>GitLab-Runner是配合GitLab-CI进行使用的。一般的，GitLab里面的每一个工程都会定义一个属于这个工程的软件集成脚本，用来自动化地完成一些软件集成工作。当这个工程的仓库代码发生变动时，比如有人push了代码，GitLab就会将这个变动通知GitLab-CI。这时GitLab-CI会找出与这个工程相关联的Runner，并通知这些Runner把代码更新到本地并执行预定义好的执行脚本。</p>
<p>Runner可以分布在不同的主机上，同一个主机上也可以有多个Runner</p>
</blockquote>
<h5 id="Runner类型"><a href="#Runner类型" class="headerlink" title="Runner类型"></a>Runner类型</h5><p><strong>Shared Runner（共享型）</strong></p>
<blockquote>
<p>这种Runner是所有工程都能够用的。只有系统管理员能够创建Shared Runner。<br><strong>Specific Runner（指定型）</strong><br>这种Runner只能为指定的工程服务。拥有该工程访问权限的人都能为该工程创建Shared Runner。</p>
</blockquote>
<h5 id="创建-Runner"><a href="#创建-Runner" class="headerlink" title="创建 Runner"></a>创建 Runner</h5><blockquote>
<p>Linux 服务器安装 gitlab-CI-multi-runner <a href="https://gitlab.com/gitlab-org/gitlab-ci-multi-runner" target="_blank" rel="external">官方文档</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># For Debian/Ubuntu</div><div class="line">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.deb.sh | sudo bash</div><div class="line">$ sudo apt-get install gitlab-ci-multi-runner</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># For CentOS</div><div class="line">$ curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-ci-multi-runner/script.rpm.sh | sudo bash</div><div class="line">$ sudo yum install gitlab-ci-multi-runner</div></pre></td></tr></table></figure>
<h5 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h5><blockquote>
<p>安装好 GitLab Runner 之后，我们只要启动 Runner 然后和 CI 绑定就可以了：</p>
</blockquote>
<ul>
<li>打开你 GitLab 中的项目页面，在项目设置中找到 runners</li>
<li>运行 sudo gitlab-ci-multi-runner register</li>
<li>输入 CI URL</li>
<li>输入 Token</li>
<li>输入 Runner 的名字</li>
<li>选择 Runner 的类型，简单起见还是选 Shell 吧</li>
<li>完成</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="http://zhaozhiming.github.io/blog/2015/11/30/gitlab-ci-runner-create-and-config/" target="_blank" rel="external">http://zhaozhiming.github.io/blog/2015/11/30/gitlab-ci-runner-create-and-config/</a></li>
<li><a href="http://www.tuicool.com/articles/jEBf6jb" target="_blank" rel="external">http://www.tuicool.com/articles/jEBf6jb</a></li>
<li><a href="https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/" target="_blank" rel="external">https://scarletsky.github.io/2016/07/29/use-gitlab-ci-for-continuous-integration/</a></li>
<li><a href="https://www.oschina.net/question/12_219138" target="_blank" rel="external">https://www.oschina.net/question/12_219138</a></li>
<li><a href="http://5404542.blog.51cto.com/5394542/1851887" target="_blank" rel="external">http://5404542.blog.51cto.com/5394542/1851887</a></li>
<li><a href="https://segmentfault.com/a/1190000007180257" target="_blank" rel="external">https://segmentfault.com/a/1190000007180257</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;GitLab-Runner&quot;&gt;&lt;a href=&quot;#GitLab-Runner&quot; class=&quot;headerlink&quot; title=&quot;GitLab-Runner&quot;&gt;&lt;/a&gt;GitLab-Runner&lt;/h4&gt;
    
    </summary>
    
      <category term="tool" scheme="http://yoursite.com/categories/tool/"/>
    
    
      <category term="GitLab-CI" scheme="http://yoursite.com/tags/GitLab-CI/"/>
    
  </entry>
  
  <entry>
    <title>GitLab-CI 一些概念</title>
    <link href="http://yoursite.com/2017/09/12/gitlabci/gitlabci/"/>
    <id>http://yoursite.com/2017/09/12/gitlabci/gitlabci/</id>
    <published>2017-09-12T06:58:16.000Z</published>
    <updated>2017-09-12T07:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="GitLab-CI"><a href="#GitLab-CI" class="headerlink" title="GitLab-CI"></a>GitLab-CI</h5><a id="more"></a>
<h6 id="Continuous-Integration-持续集成"><a href="#Continuous-Integration-持续集成" class="headerlink" title="Continuous Integration(持续集成)"></a>Continuous Integration(持续集成)</h6><blockquote>
<p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽快的发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能都更快的开发内聚的软件。</p>
<p>软件集成： 代码合并–&gt; 安装依赖–&gt; 编译–&gt; 测试 –&gt;发布。</p>
</blockquote>
<h6 id="GitLab-CI-1"><a href="#GitLab-CI-1" class="headerlink" title="GitLab-CI"></a>GitLab-CI</h6><blockquote>
<p>GitLab-CI 就是一套配合GitLab使用的持续集成系统（Jenkins也可以配合GitLab使用）。</p>
</blockquote>
<h6 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h6><blockquote>
<p>一次 Pipeline 其实相当于一次构建任务，里面可以包含多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。<br>任何提交或者 Merge Request 的合并都可以触发 Pipeline，如下图所示：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+------------------+           +----------------+</div><div class="line">|                  |  trigger  |                |</div><div class="line">|   Commit / MR    +----------&gt;+    Pipeline    |</div><div class="line">|                  |           |                |</div><div class="line">+------------------+           +----------------+</div></pre></td></tr></table></figure>
<h6 id="Stages"><a href="#Stages" class="headerlink" title="Stages"></a>Stages</h6><p>Stages 表示构建阶段，说白了就是上面提到的流程。<br>我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p>
<p>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始<br>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功<br>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败<br>因此，Stages 和 Pipeline 的关系就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+--------------------------------------------------------+</div><div class="line">|                                                        |</div><div class="line">|  Pipeline                                              |</div><div class="line">|                                                        |</div><div class="line">|  +-----------+     +------------+      +------------+  |</div><div class="line">|  |  Stage 1  |----&gt;|   Stage 2  |-----&gt;|   Stage 3  |  |</div><div class="line">|  +-----------+     +------------+      +------------+  |</div><div class="line">|                                                        |</div><div class="line">+--------------------------------------------------------+</div></pre></td></tr></table></figure>
<h6 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a>Jobs</h6><p>Jobs 表示构建工作，表示某个 Stage 里面执行的工作。<br>我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p>
<p>相同 Stage 中的 Jobs 会并行执行<br>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功<br>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 失败<br>所以，Jobs 和 Stage 的关系图就是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+------------------------------------------+</div><div class="line">|                                          |</div><div class="line">|  Stage 1                                 |</div><div class="line">|                                          |</div><div class="line">|  +---------+  +---------+  +---------+   |</div><div class="line">|  |  Job 1  |  |  Job 2  |  |  Job 3  |   |</div><div class="line">|  +---------+  +---------+  +---------+   |</div><div class="line">|                                          |</div><div class="line">+------------------------------------------+</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;GitLab-CI&quot;&gt;&lt;a href=&quot;#GitLab-CI&quot; class=&quot;headerlink&quot; title=&quot;GitLab-CI&quot;&gt;&lt;/a&gt;GitLab-CI&lt;/h5&gt;
    
    </summary>
    
      <category term="tool" scheme="http://yoursite.com/categories/tool/"/>
    
    
      <category term="GitLab-CI" scheme="http://yoursite.com/tags/GitLab-CI/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 常用命令</title>
    <link href="http://yoursite.com/2017/08/17/hexo/hexo/"/>
    <id>http://yoursite.com/2017/08/17/hexo/hexo/</id>
    <published>2017-08-17T07:05:42.000Z</published>
    <updated>2017-09-26T08:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo</p>
<a id="more"></a>
<p>安装 Hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure></p>
<p>查看 Node 版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure></p>
<p>查看 Hexo 版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo version</div></pre></td></tr></table></figure></p>
<p>创建项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init hexo-lcx</div></pre></td></tr></table></figure></p>
<p>进入目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd hexo-lcx</div></pre></td></tr></table></figure></p>
<p>也可以先进目录再初始化项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd hexo-lcx</div><div class="line">hexo init</div></pre></td></tr></table></figure></p>
<p>安装依赖包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>以后所有的命令都在该目录下进行</p>
<p>启动服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>用浏览器打开<a href="http://localhost:4000/或者http://127.0.0.1:4000/就能看到网页了" target="_blank" rel="external">http://localhost:4000/或者http://127.0.0.1:4000/就能看到网页了</a><br>推荐使用现代化浏览器(Chrome)获得最佳效果</p>
<p>按Ctrl+C停止本地预览服务</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch</title>
    <link href="http://yoursite.com/2017/08/17/Elasticsearch-%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/08/17/Elasticsearch-笔记/</id>
    <published>2017-08-17T07:05:42.000Z</published>
    <updated>2017-09-26T08:07:01.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Elasticsearch指南"><a href="#Elasticsearch指南" class="headerlink" title="Elasticsearch指南"></a>Elasticsearch指南</h4><a id="more"></a>
<p>文档地址：<br><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html#getting-started" target="_blank" rel="external">英文官方文档</a>  </p>
<p><a href="https://www.gitbook.com/book/looly/elasticsearch-the-definitive-guide-cn/details" target="_blank" rel="external">Elasticsearch权威指南（中文版）</a></p>
<p><a href="http://www.jianshu.com/p/f9adeded30b8" target="_blank" rel="external">Elasticsearch 5.4.0 用户指南</a></p>
<p><a href="http://www.jianshu.com/p/f3a1982bf302" target="_blank" rel="external">全文检索基础</a></p>
<p><a href="http://blog.csdn.net/jiuqiyuliang/article/details/51245335" target="_blank" rel="external">安装</a></p>
<p><a href="http://www.jianshu.com/p/068ee911c001" target="_blank" rel="external">ik中文分词</a><br><a href="http://www.cnblogs.com/xing901022/p/5910139.html" target="_blank" rel="external">拼音分词</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Elasticsearch指南&quot;&gt;&lt;a href=&quot;#Elasticsearch指南&quot; class=&quot;headerlink&quot; title=&quot;Elasticsearch指南&quot;&gt;&lt;/a&gt;Elasticsearch指南&lt;/h4&gt;
    
    </summary>
    
      <category term="程序" scheme="http://yoursite.com/categories/programming/"/>
    
    
      <category term="Elasticsearch" scheme="http://yoursite.com/tags/Elasticsearch/"/>
    
  </entry>
  
</feed>
